name: Release Executable

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Trigger on version tags
  pull_request:
    branches:
      - main

permissions:
  contents: write # to be able to publish a GitHub release
  issues: write # to be able to comment on released issues
  pull-requests: write # to be able to comment on released pull requests
  id-token: write # to enable use of OIDC for npm provenance

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "23"

      - name: Install dependencies
        run: npm install

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release --debug

  # Windows Build Job
  windows-build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Retrieve Python Version on Windows
        id: get_python_version
        run: |
          $python_version = & python --version
          Write-Host "Python Version: $python_version"
          $env:PYTHON_VERSION = $python_version.Split(' ')[1]
          Write-Host "Setting PYTHON_VERSION=$($env:PYTHON_VERSION)"
          echo "PYTHON_VERSION=$($env:PYTHON_VERSION)" >> $env:GITHUB_ENV

      - name: Get pip cache directory
        id: get_pip_cache_dir
        run: |
          $pip_cache_dir = & python -m pip cache dir
          echo "Pip cache directory is: $pip_cache_dir"
          echo "PIP_CACHE_DIR=$pip_cache_dir" >> $env:GITHUB_ENV

      - name: Cache Python dependencies (Windows)
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} -r dev-requirements.txt
          pip install pyinstaller

      - name: Build Executable using PyInstaller for Windows
        run: |
          pyinstaller --onefile --console --name plexsyncer-${{ env.PYTHON_VERSION }}-win --distpath dist --workpath build --specpath spec cli.py

      - name: Upload Windows Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ env.PYTHON_VERSION }}-windows
          path: dist/plexsyncer*

    outputs:
      tag: ${{ github.ref_name }}

  # Linux and macOS Build Job
  linux-macos-build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.x]
    runs-on: ${{ matrix.os }}

    env:
      PIP_CACHE_DIR: ~/.cache/pip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies (Linux/macOS)
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} -r dev-requirements.txt
          pip install pyinstaller

      - name: Build Executable using PyInstaller for ${{ runner.os }}
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            pyinstaller --onefile --console --name plexsyncer-${{ matrix.python-version }}-linux --distpath dist --workpath build --specpath spec cli.py
          elif [ "${{ runner.os }}" == "macOS" ]; then
            pyinstaller --onefile --console --name plexsyncer-${{ matrix.python-version }}-macos --distpath dist --workpath build --specpath spec cli.py
          fi

      - name: Upload ${{ runner.os }} Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ matrix.python-version }}-${{ runner.os }}
          path: dist/plexsyncer*

    outputs:
      tag: ${{ github.ref_name }}
      runner-os: ${{ matrix.os }}

  # Publish Release Job
  publish-release:
    needs: [windows-build, linux-macos-build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Get the latest tag created by semantic-release
      - name: Get Latest Tag
        id: get_tag
        run: |
          # Fetch tags if not already fetched
          git fetch --tags
          # Retrieve the most recent tag
          latest_tag=$(git describe --tags --abbrev=0 --match "v*")
          if [ -z "$latest_tag" ]; then
            echo "No tags found"
            exit 1
          fi
          echo "Latest tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_OUTPUT

      - name: Download Windows Executable Artifact
        uses: actions/download-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ steps.get_tag.outputs.LATEST_TAG }}-windows-latest
          path: ./dist

      - name: Download Linux Executable Artifact
        uses: actions/download-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ steps.get_tag.outputs.LATEST_TAG }}-ubuntu-latest
          path: ./dist

      - name: Download macOS Executable Artifact
        uses: actions/download-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ steps.get_tag.outputs.LATEST_TAG }}-macos-latest
          path: ./dist

      - name: Unpack Artifacts
        run: |
          mkdir -p binaries
          mv ./dist/plexsyncer* binaries/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: binaries/*
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
