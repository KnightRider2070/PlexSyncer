name: Release Executable

on:
  push:
    tags:
      - "v*" # Trigger on version tags
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "23"

      - name: Install dependencies
        run: npm install

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --debug

  # Windows Build Job
  windows-build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
          pip install pyinstaller

      - name: Build Executable using PyInstaller for Windows
        run: |
          pyinstaller --onefile --console --name plexsyncer-${{ github.ref_name }}-win --distpath dist --workpath build --specpath spec cli.py  # Windows build

      - name: Upload Windows Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ github.ref_name }}-windows-latest
          path: dist/plexsyncer*

    outputs:
      tag: ${{ github.ref_name }}

  # Linux and macOS Build Job
  linux-macos-build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
          pip install pyinstaller

      - name: Build Executable using PyInstaller for ${{ matrix.os }}
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            pyinstaller --onefile --console --name plexsyncer-${{ github.ref_name }}-linux --distpath dist --workpath build --specpath spec cli.py  # Linux build
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            pyinstaller --onefile --console --name plexsyncer-${{ github.ref_name }}-macos --distpath dist --workpath build --specpath spec cli.py  # macOS build
          fi

      - name: Upload ${{ matrix.os }} Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ github.ref_name }}-${{ matrix.os }}
          path: dist/plexsyncer*

    outputs:
      tag: ${{ github.ref_name }}
      runner-os: ${{ matrix.os }}

  # Release Job
  publish-release:
    needs: [windows-build, linux-macos-build, release]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows Executable Artifact
        uses: actions/download-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ needs.windows-build.outputs.tag }}-windows-latest
          path: ./dist

      - name: Download Linux Executable Artifact
        uses: actions/download-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ needs.linux-macos-build.outputs.tag }}-ubuntu-latest
          path: ./dist

      - name: Download macOS Executable Artifact
        uses: actions/download-artifact@v4
        with:
          name: plexsyncer-executable-${{ github.run_id }}-${{ needs.linux-macos-build.outputs.tag }}-macos-latest
          path: ./dist

      - name: Unpack Artifacts
        run: |
          mkdir -p binaries
          mv ./dist/plexsyncer* binaries/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: binaries/*
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
